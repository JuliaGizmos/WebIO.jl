var documenterSearchIndex = {"docs":
[{"location":"api/jsstring/#JSString","page":"JSString","title":"JSString","text":"","category":"section"},{"location":"api/jsstring/#Public-API","page":"JSString","title":"Public API","text":"","category":"section"},{"location":"api/jsstring/","page":"JSString","title":"JSString","text":"@js_str","category":"page"},{"location":"api/jsstring/#WebIO.@js_str","page":"JSString","title":"WebIO.@js_str","text":"@js_str(s)\n\nCreate a JSString using a string literal and perform interpolations from Julia.\n\nExamples\n\njulia> mystr = \"foo\"; mydict = Dict(\"foo\" => \"bar\", \"spam\" => \"eggs\");\njulia> println(js\"const myStr = $mystr; const myObject = $mydict;\")\nconst myStr = \"foo\"; const myObject = {\"spam\":\"eggs\",\"foo\":\"bar\"};\n\n\n\n\n\n","category":"macro"},{"location":"api/jsstring/#Internal-API","page":"JSString","title":"Internal API","text":"","category":"section"},{"location":"api/jsstring/","page":"JSString","title":"JSString","text":"WebIO.JSString\nWebIO.tojs","category":"page"},{"location":"api/jsstring/#WebIO.tojs","page":"JSString","title":"WebIO.tojs","text":"tojs(x)\n\nReturns a JSString object that constructs the same object as x\n\n\n\n\n\n","category":"function"},{"location":"providers/mux/#Blink","page":"Blink","title":"Blink","text":"","category":"section"},{"location":"providers/mux/#API-Reference","page":"Blink","title":"API Reference","text":"","category":"section"},{"location":"providers/mux/","page":"Blink","title":"Blink","text":"WebIO.webio_serve","category":"page"},{"location":"providers/mux/#WebIO.webio_serve","page":"Blink","title":"WebIO.webio_serve","text":"webio_serve(app, port=8000)\n\nServe a Mux app which might return a WebIO node.\n\n\n\n\n\n","category":"function"},{"location":"api/asset/#Assets","page":"Assets","title":"Assets","text":"","category":"section"},{"location":"api/asset/#Public-API","page":"Assets","title":"Public API","text":"","category":"section"},{"location":"api/asset/","page":"Assets","title":"Assets","text":"Asset\nAsync\nSync","category":"page"},{"location":"api/asset/#WebIO.Asset","page":"Assets","title":"WebIO.Asset","text":"Asset(url)\nAsset(name, url)\nAsset(name => url)\nAsset(filetype, name, url)\n\nA browser asset that can be loaded by WebIO.\n\nThe url parameter may be either a remote URL or a local filepath (which will be served via AssetRegistry.jl). All of the following are valid url values.\n\nhttps://unpkg.com/react@16/umd/react.development.js\n//unpkg.com/react@16/umd/react.development.js\n./path/to/foo.js\n\nBy default, the filetype is guessed as the extension of the specified url (only \"js\", \"css\", and \"html\" are currently supported) but may be specified if nonstandard extensions are in use.\n\n\n\n\n\n","category":"type"},{"location":"api/asset/#WebIO.Async","page":"Assets","title":"WebIO.Async","text":"Async(assets...)\n\nA group (\"block\") of assets that will be imported with no specified order (asynchronously) in the browser. This is useful when dependencies can be imported in any order. The elements of assets may either be Assets themselves, any valid constructor for an Asset, or a Sync or Async.\n\nIf the imports need to be imported sequentially, use Sync instead.\n\n\n\n\n\n","category":"type"},{"location":"api/asset/#WebIO.Sync","page":"Assets","title":"WebIO.Sync","text":"Sync(assets...)\n\nA group (\"block\") of assets that will be imported sequentially (synchronously) in the browser. This is useful when dependencies have side effects that must be executed in order. The elements of assets may either be Assets themselves, any valid constructor for an Asset, or a Sync or Async.\n\nIf the imports do not need to be imported sequentially, use Async instead.\n\nExamples\n\njulia> WebIO.Sync(Asset(\"foo.js\"), \"bar\" => \"bar.js\")\nSync(Asset[Asset(\"js\", nothing, \"foo.js\"), Asset(\"js\", \"bar\", \"bar.js\")])\n\n\n\n\n\n","category":"type"},{"location":"api/asset/#Private-API","page":"Assets","title":"Private API","text":"","category":"section"},{"location":"api/asset/","page":"Assets","title":"Assets","text":"WebIO.dep2url\nWebIO.ensure_asset\nWebIO.getextension\nWebIO.islocal\nWebIO.path2url","category":"page"},{"location":"api/asset/#WebIO.dep2url","page":"Assets","title":"WebIO.dep2url","text":"dep2url(dep)\n\nReturn the URL where the dependency can be fetched from. If the dependency is a URL (e.g. hosted at a CDN), the same URL is returned. Otherwise, the depency is registered with AssetRegistry.jl and served from there.\n\n\n\n\n\n","category":"function"},{"location":"api/asset/#WebIO.ensure_asset","page":"Assets","title":"WebIO.ensure_asset","text":"ensure_asset(asset)\n\nEnsure that asset is a valid Asset or Async or Sync. If it's not, calls the Asset constructor on the argument.\n\n\n\n\n\n","category":"function"},{"location":"api/asset/#WebIO.getextension","page":"Assets","title":"WebIO.getextension","text":"getextension(path)\n\nGet the file extension of the path. The extension is defined to be the bit after the last dot, excluding any query string.\n\nExamples\n\njulia> WebIO.getextension(\"foo.bar.js\")\n\"js\"\njulia> WebIO.getextension(\"https://my-cdn.net/foo.bar.css?version=1\")\n\"css\"\n\n\n\n\n\n","category":"function"},{"location":"api/asset/#WebIO.islocal","page":"Assets","title":"WebIO.islocal","text":"islocal(path)\n\nDetermine whether or not the specified path is a local filesystem path (and not a remote resource that is hosted on, for example, a CDN).\n\n\n\n\n\n","category":"function"},{"location":"api/asset/#WebIO.path2url","page":"Assets","title":"WebIO.path2url","text":"path2url(path)\n\nRegister the specified path with AssetRegistry and return the url that corresponds to that path.\n\nExamples\n\njulia> WebIO.path2url(expanduser(\"~/Documents/foo.js\"))\n\"/assetserver/bd67c48cbe6388c22f85faef9840ff9a2dfc1df6-foo.js\"\n\n\n\n\n\n","category":"function"},{"location":"gettingstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#Installing-WebIO","page":"Getting Started","title":"Installing WebIO","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"WebIO is installed just like any other Julia package.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"WebIO\")\nusing WebIO","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Make sure to watch for any errors during the build process; WebIO does its best to install everything to the right location, but sometimes it can't find all the right things (especially for Jupyter). If you get any warnings, please file an issue on GitHub.","category":"page"},{"location":"gettingstarted/#Displaying-to-a-Frontend","page":"Getting Started","title":"Displaying to a Frontend","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"First, load the appropriate frontend (e.g. Jupyter or Blink or Atom/Juno). For simplicity, Jupyter is recommended while you're getting started.","category":"page"},{"location":"gettingstarted/#Jupyter","page":"Getting Started","title":"Jupyter","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"In a Julia Jupyter notebook (either via the classic notebook interface or in JupyterLab), any WebIO content is automagically rendered into the browser. For example, try displaying a paragraph.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"In[*]: node(:p, \"Hello, Jupyter\")","category":"page"},{"location":"gettingstarted/#Blink","page":"Getting Started","title":"Blink","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Blink is a Julia interface for Electron (a way to write desktop apps using web technologies). WebIO content can be displayed in a Blink window using the body! function.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Blink\nw = Window()\nbody!(w, dom\"p\"(\"Hello, Blink!\"))","category":"page"},{"location":"gettingstarted/#Mux","page":"Getting Started","title":"Mux","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Return a WebIO Node from a web app to render it. Use webio_serve to serve the application.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"function myapp(req)\n    return node(:p, \"Hello, Mux!\")\nend\n\nwebio_serve(page(\"/\", req -> myapp(req)))","category":"page"},{"location":"gettingstarted/#Generic-HTTP","page":"Getting Started","title":"Generic HTTP","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"# Create your own display function\nfunction Base.display(d::MyWebDisplay, m::WebIO.WEBIO_APPLICATION_MIME, app)\n    println(d.io, \"outer html\")\n    # Calling show will make sure a server is running and serves dependencies\n    # from AssetRegistry and a websocket connection gets established.\n    show(d.io, m, app) #<- prints the html + scripts webio needs to work into io\n    println(d.io, \"close outer html\")\nend","category":"page"},{"location":"gettingstarted/#Juno","page":"Getting Started","title":"Juno","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"WebIO nodes should be automatically rendered when displayed.","category":"page"},{"location":"gettingstarted/#Composing-Content","page":"Getting Started","title":"Composing Content","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Suppose we want to display the following HTML.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"<ul class=\"my-list\">\n    <li>get milk</li>\n    <li>make a pie</li>\n</ul>","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We can nest nodes inside of each other to accomplish this.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Node(\n    :ul,\n    Node(:li, \"get milk\"),\n    Node(:li, \"make a pie\"),\n    attributes=Dict(:class => \"my-list\"),\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Some DOM properties (most importantly, style and events) can be specified as Julia dictionaries.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Node(\n    :div,\n    \"Hello, world!\",\n    style=Dict(\n        :backgroundColor => \"black\",\n        :color => \"white\",\n        :padding => \"12px\",\n   ),\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This is equivalent to this snippet using attributes.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Node(\n    :div,\n    \"Hello, World\",\n    attributes=Dict(\n        :style => \"background-color: black; color: white; padding: 12px\",\n    ),\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Checkout out the Node reference for more information.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe attributes keyword argument sets the attributes of the HTML element (via the setAttribute DOM API function). Any other keyword argument is set as the property of the DOM node itself.N.B. Attribute values should be strings (or nothing, in which case the attribute is deleted). Attribute keys are specified with the name as would be written in HTML (e.g. class for the CSS class name) whereas properties are specified as the name in the browser DOM API (e.g. className). This is because one writes<p class=\"important\">Don't stuff beans up your nose!</p>whereas the DOM API would bemyParagraph = document.createElement(\"p\");\nmyParagraph.className = \"important\";\n// Or, equivalently...\nmyParagraph.setAttribute(\"class\", \"important\");For example, the following are equivalent.node(:ul, className=\"my-list\")\nnode(:ul, attributes=Dict(:class => \"my-list\"))When in doubt, use attributes for everything except the style and events properties.","category":"page"},{"location":"gettingstarted/#The-dom\"\"-macro","page":"Getting Started","title":"The dom\"\" macro","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The dom\"\" string macro can be used to simplify the creation of DOM nodes and is based on the querySelector DOM API. The syntax for the macro is","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"dom\"<tag>.<class>#<id>[<attr>=<value>,...]\"(children...; props...)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"which is equivalent to","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Node(\n    :tag,\n    children...,\n    className=\"<class>\",\n    id=\"<id>\",\n    attributes=Dict(:attr1 => val1, :attr2 => val2...);\n    props...\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"For example","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"dom\"div.warning.big-text#my-modal[aria-modal=true]\"(\n    dom\"p\"(\"Uh oh! A bad thing happened.\"),\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"yields this HTML","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"<div id=\"my-modal\" class=\"warning big-text\" aria-modal=\"true\">\n    <p>Uh oh! A bad thing happened.</p>\n</div>","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Everything except the tag is optional, so all of these are valid.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"dom\"div\"\ndom\"div.class1\"\ndom\"div.class1.class2\"\ndom\"div#my-id\"\ndom\"input.check[type=checkbox]\"","category":"page"},{"location":"gettingstarted/#JavaScript","page":"Getting Started","title":"JavaScript","text":"","category":"section"},{"location":"gettingstarted/#Executing-JavaScript","page":"Getting Started","title":"Executing JavaScript","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Event handlers can be set up by passing a dict as the events keyword argument to Node, (and the dom\"\" macro). For example,","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"dom\"button\"(\n    \"Greet\",\n     events=Dict(\n        \"click\" => js\"function() { alert('Hello, World!'); }\",\n    ),\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This will create a button which shows an alert box with the message \"Hello, World!\" when clicked.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"There are 2 ways to write JavaScript in conjunction with WebIO. First, you can use the js\"\" string macro to just write any JavaScript as a string. For example","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"js\"\"\"\nalert(\"Hello, World!\")\n\"\"\"","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This will return an object of type JSString which can be used anywhere WebIO expects JavaScript expressions. The js\"\" macro also appropriately escapes any interpolated variables.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> myvar = [1, \"foo\", Dict(\"foo\" => \"bar\")];\njulia> println(js\"console.log($myvar);\")\nconsole.log([1,\"foo\",{\"foo\":\"bar\"}]);","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The second way is to use the @js macro from JSExpr.jl. The @js macro can translate arbitrary Julia expressions to the equivalent JavaScript.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using JSExpr\n@js alert(\"Hello, World!\")","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We can rewrite our greeting example above using the @js macro too.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"dom\"button\"(\n    \"Greet\",\n    events=Dict(\n        \"click\" => (@js () -> alert(\"Hello, World!\")),\n    ),\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe variables and functions you reference in a @js expression must be defined in the JavaScript context where the expression will be executed (for example, in an event callback) and do not need to be defined in Julia.Values from Julia can be interpolated into both the js\"\" and @js macros, but this interpolation happens when the JSString is created (and not when the JavaScript code is executed).For example, consider the following snippet.myname = \"Walter\"\ndisplay(dom\"button\"(\"Greet Me!\", events=Dict(\"click\" => @js alert($myname))))When you click the button, it will alert \"Walter\" as expected. But if you later change the value of myname,myname = \"Sylvia\"clicking the button will still result in \"Walter\" since the value of myname was interpolated when the expression was parsed.See Communicating between Julia and JavaScript to learn how to use the latest value of a variable in either Julia or JavaScript.","category":"page"},{"location":"gettingstarted/#Communicating-between-Julia-and-JavaScript","page":"Getting Started","title":"Communicating between Julia and JavaScript","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"A Scope acts as a medium for bidirectional communication between Julia and JavaScript. The primary method of communication is Observables which are essentially wrappers around values that may change over time. A Scope may contain several observables whose values can be updated and read from either JavaScript or Julia.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We associate an observable with a scope as follows.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"w = Scope()\nobs = Observable(w, \"rand-value\", 0.0)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The \"rand-value\" argument is the name of the observable and must be unique for a given scope.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"You can get the value of obs in Julia with the syntax obs[]. You can set the value using the syntax obs[] = val. To listen to changes to the value you can use the on function to set up a listener.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"on((value) -> println(\"Value is now $(value)!\"), obs)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"or, using do-block syntax,","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"on(obs) do value\n    println(\"Value is now $(value)!\")\nend","category":"page"},{"location":"gettingstarted/#Sending-values-from-JavaScript-to-Julia","page":"Getting Started","title":"Sending values from JavaScript to Julia","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Sending values from JavaScript to Julia is easiest via the @js macro. Consider this simple example.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"scope = Scope()\nobs = Observable(scope, \"rand-value\", 0.0)\n\non(obs) do x\n    println(\"JavaScript sent $(x)!\")\nend\n\nscope(\n    dom\"button\"(\n        \"Generate Random Number\",\n        events=Dict(\"click\" => @js () -> $obs[] = Math.random()),\n    ),\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Note\nNotice that the last expression actually calls the scope scope with the contents that should be displayed. This causes the contents to be wrapped in the scope's context. All uses of observables associated with scope (e.g. obs) should be enclosed in the scope scope.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Note that we use the syntax $obs[] = ... inside the @js macro to update the value of the obs Observable.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Using the js\"\" macro, we can write","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"js\"_webIOScope.getObservableValue('obs')\"","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"and","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"_webIOScope.setObservableValue(\"obs\", ...);","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"wherever we want to get and set the values of observables (respectively).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe values of WebIO and _webIOScope are defined when executing any JavaScript code in WebIO. The value of _webIOScope is the nearest ancestor scope (or undefined if there is none).","category":"page"},{"location":"gettingstarted/#Sending-values-from-Julia-to-JavaScript","page":"Getting Started","title":"Sending values from Julia to JavaScript","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The onjs function allows us to hook up a JavaScript listener on an Observable just like we can use on for a Julia listener. For example, we can log to the console whenever the value of our observable changes.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"s = Scope()\nobs = Observable(s, \"logme\", \"\")\nonjs(\n    s, \"logme\",\n    js\"\"\"\n    function(newValue) {\n        console.log(newValue);\n    }\n    \"\"\"\n)","category":"page"},{"location":"gettingstarted/#Rendering-Observables","page":"Getting Started","title":"Rendering Observables","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"For an even easier way to send values from Julia to JavaScript, we can simply rely on the fact that WebIO knows how to render Observables directly to HTML. In this case WebIO will automatically construct a Scope and insert the relevant JavaScript to update the rendered content whenever the Observable changes value.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Dates\ntimestr() = Dates.format(now(), \"HH:MM:SS\")\n\ntime = Observable(timestr())\n@async while true\n    sleep(1)\n    time[] = timestr()\nend\n\ndisplay(time)","category":"page"},{"location":"gettingstarted/#Loading-JavaScript-dependencies","page":"Getting Started","title":"Loading JavaScript dependencies","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"You can load dependencies by creating a Scope object and providing the imports argument. The onmount function will add a mount callback to a scope that will be called with all of the dependencies provided via the imports argument.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using WebIO, JSExpr\n\nw = Scope(imports=[\"//cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.11/p5.js\"])\nonmount(w, @js function (p5)\n    function sketch(s)\n        s.setup = () -> s.createCanvas(640, 480)\n\n        s.draw = function ()\n          if s.mouseIsPressed\n            s.fill(0)\n          else\n            s.fill(255)\n          end\n          s.ellipse(s.mouseX, s.mouseY, 80, 80)\n        end\n    end\n    @new p5(sketch, this.dom.querySelector(\".container\"))\nend)\nw(dom\"div.container\"())","category":"page"},{"location":"gettingstarted/#Examples","page":"Getting Started","title":"Examples","text":"","category":"section"},{"location":"gettingstarted/#Clock-(Julia-to-JS-Communication)","page":"Getting Started","title":"Clock (Julia to JS Communication)","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"s = Scope()\ns(dom\"span.current-time\"())\ntime = Observable(s, \"time\", \"\")\ntimestr() = Dates.format(now(), \"HH:MM:SS\")\n\n# Update the time every second\n@async while true\n    time[] = timestr()\n    sleep(1)\nend\n\n# Setup a JavaScript listener\nonjs(\n    s, \"time\",\n    js\"\"\"\n    function(time) {\n        this.dom.querySelector(\".current-time\").textContent = time;\n    }\n    \"\"\"\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Note\nIn the onjs callback, this is set to the Scope object (though the value of _webIOScope is also set, as noted above).The value of this.dom refers to the DOM node of the scope. Importantly, this is not the content of the scope, but rather, the DOM node that encloses the scope (so we need to use querySelector to find the actual DOM node that we want to update). For example, consider a scope whose content is simply a <span />; the value of this.dom will be a <div /> whose only child is that <span />.","category":"page"},{"location":"troubleshooting/not-detected/#Troubleshooting-Jupyter","page":"Troubleshooting Jupyter","title":"Troubleshooting Jupyter","text":"","category":"section"},{"location":"troubleshooting/not-detected/","page":"Troubleshooting Jupyter","title":"Troubleshooting Jupyter","text":"Please see the IJulia documentation.","category":"page"},{"location":"providers/ijulia/#IJulia-(Jupyter)","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"","category":"section"},{"location":"providers/ijulia/#Jupyter-installation","page":"IJulia (Jupyter)","title":"Jupyter installation","text":"","category":"section"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"Jupyter Notebook and JupyterLab integration is provided via the webio_jupyter_extension package which is distributed on PyPI (the Python package repository) since JupyterLab makes heavy use of the Python ecosystem.","category":"page"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"From a system terminal (not the Julia command line), run:","category":"page"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"python3 -m pip install --upgrade webio_jupyter_extension","category":"page"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"Note: Since the WebIO Jupyter extension is distributed separately from the WebIO Julia package, you may occasionally have to upgrade the WebIO extension separately using the same command as above.","category":"page"},{"location":"providers/ijulia/#Install-using-Conda.jl","page":"IJulia (Jupyter)","title":"Install using Conda.jl","text":"","category":"section"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"If using Conda.jl, the extension must be installed within the appropriate Conda environment. This might be required if you launch Jupyter via the IJulia.notebook() or IJulia.jupyterlab() commands (only if you don't have Jupyter installed on your system outside of IJulia).","category":"page"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"# within a Julia REPL\nusing Conda\nConda.pip_interop(true)\nConda.pip(\"install\", \"webio_jupyter_extension\")","category":"page"},{"location":"providers/ijulia/#Uninstall","page":"IJulia (Jupyter)","title":"Uninstall","text":"","category":"section"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"From a system terminal (not the Julia command line), run:","category":"page"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"python3 -m pip uninstall webio_jupyter_extension","category":"page"},{"location":"providers/ijulia/#Troubleshooting","page":"IJulia (Jupyter)","title":"Troubleshooting","text":"","category":"section"},{"location":"providers/ijulia/#The-webio_jupyter_extension-is-installed-but-not-working","page":"IJulia (Jupyter)","title":"The webio_jupyter_extension is installed but not working","text":"","category":"section"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"Make sure you've installed the webio_jupyter_extension package in the same Python or Conda environment that you're using to launch Jupyter.","category":"page"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"You can ensure that you're using the same environment by installing the extension and launching Jupyter like so:","category":"page"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"python3 -m pip install webio_jupyter_extension\npython3 -m jupyterlab","category":"page"},{"location":"providers/ijulia/#Still-having-problems?","page":"IJulia (Jupyter)","title":"Still having problems?","text":"","category":"section"},{"location":"providers/ijulia/","page":"IJulia (Jupyter)","title":"IJulia (Jupyter)","text":"Open a GitHub issue. Please make sure to include information about what you've tried and what the results of those steps were.","category":"page"},{"location":"api/observable/#Observables","page":"Observables","title":"Observables","text":"","category":"section"},{"location":"api/observable/#Internal-API","page":"Observables","title":"Internal API","text":"","category":"section"},{"location":"api/observable/","page":"Observables","title":"Observables","text":"WebIO.ObservableNode","category":"page"},{"location":"providers/blink/#Blink","page":"Blink","title":"Blink","text":"","category":"section"},{"location":"extending/#Extending-WebIO","page":"Extending WebIO","title":"Extending WebIO","text":"","category":"section"},{"location":"extending/#Rendering-Custom-Objects","page":"Extending WebIO","title":"Rendering Custom Objects","text":"","category":"section"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"WebIO defines the WebIO.render function which can be extended to render any Julia type into the DOM. Think of it as a better version of show(io::IO, m::MIME\"text/html\", x) (where the output is a tree of Node's instead of an HTML string).","category":"page"},{"location":"extending/#Learning-By-Example","page":"Extending WebIO","title":"Learning By Example","text":"","category":"section"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"Suppose we want to teach WebIO how to render our to-do list type. Given a TodoItem like","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"struct TodoItem\n    description::String\n    done::Bool\nend","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"we might define a render method such as","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"function WebIO.render(todoitem::TodoItem)\n    return dom\"div.todo-item\"(\n        dom\"input[type=checkbox]\"(checked=todoitem.done),\n        todoitem.description,\n        style=Dict(\"display\" => \"flex\", \"flex-direction\" => \"horizontal\"),\n    )\nend","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"If we have a to-do list that looks like","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"struct TodoList\n    title::String\n    items::Vector{TodoItem}\nend\n\nmylist = TodoList(\n    \"My todo list\",\n    [\n        TodoItem(\"Make my first WebIO widget\", false),\n        TodoItem(\"Make a pie\", false),\n    ],\n)","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"we can define render as","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"function WebIO.render(list::TodoList)\n    return dom\"div\"(\n        dom\"h2\"(list.title),\n        dom\"div.todo-list\"(\n            WebIO.render.(list.items)...\n        ),\n    )\nend","category":"page"},{"location":"extending/","page":"Extending WebIO","title":"Extending WebIO","text":"Always remember to recursively WebIO.render any child elements if necessary.","category":"page"},{"location":"api/render/#Render","page":"Render","title":"Render","text":"","category":"section"},{"location":"api/render/","page":"Render","title":"Render","text":"The WebIO.render function is the primary method of extending WebIO and providing interoperability between WebIO and other libraries. For example, one could define a custom method to render a MyPlot type. See the Extending WebIO documentation for more information.","category":"page"},{"location":"api/render/#Internal-API","page":"Render","title":"Internal API","text":"","category":"section"},{"location":"api/render/","page":"Render","title":"Render","text":"WebIO.@register_renderable\nWebIO.register_renderable\nWebIO.render","category":"page"},{"location":"api/render/#WebIO.@register_renderable","page":"Render","title":"WebIO.@register_renderable","text":"@register_renderable(MyType)\n@register_renderable(MyType) do\n    # Render definition\nend\n\nRegister a type as renderable by WebIO. This enables your type to be displayed in the appropriate WebIO frontends (e.g. Jupyter) without any additional work.\n\nThis macro may be called either with just the type that you wish to mark as renderable or with the body of the WebIO.render method using do-block syntax.\n\nThe do-block syntax requires parentheses around the typename. Additionally, due to inconsistencies in the way macros are resolved, the do-block syntax must be invoked using @WebIO.register_renderable (not WebIO.@register_renderable). If the @WebIO.register_renderable syntax looks ugly, it might be preferable to directly import the macro and use it without qualifying its name.\n\nThis macro also defines a method for Base.show with the text/html MIME so you should not need to define your own.\n\nExamples\n\nstruct ScatterPlot\n    x::Vector{Float64}\n    y::Vector{Float64}\nend\n\n# Do-block syntax\n# Note that the `@` comes before `WebIO`\n@WebIO.register_renderable(ScatterPlot) do plot\n    # Construct the scatter plot using DOM primitives...\n    return node(...)\nend\n\n# Do-block syntax with explicit import\nusing WebIO: @register_renderable\n@register_renderable(ScatterPlot) do plot ... end\n\n# Type name syntax\nWebIO.render(plot::ScatterPlot) = node(...)\n@WebIO.register_renderable ScatterPlot\n\n\n\n\n\n","category":"macro"},{"location":"api/render/#WebIO.register_renderable","page":"Render","title":"WebIO.register_renderable","text":"register_renderable(MyType)\n\nThis function is deprecated. Please use WebIO.@register_renderable instead.\n\nThis function was deprecated because it contained too much magic (since magic is firmly within the domain of macros). In particular, this function resorts to eval-ing new method definitions for the types passed into it which is not what a normal function is supposed to do.\n\n\n\n\n\n","category":"function"},{"location":"api/render/#WebIO.render","page":"Render","title":"WebIO.render","text":"render(x::MyType)\n\nGeneric function that defines how a Julia object is rendered. Should return a Node object.\n\nExamples\n\nstruct MyPlot\n    s::Scope\nend\n\nWebIO.render(p::MyPlot) = WebIO.render(p.s)\n\n\n\n\n\n","category":"function"},{"location":"api/render/#Private-API","page":"Render","title":"Private API","text":"","category":"section"},{"location":"api/render/","page":"Render","title":"Render","text":"WebIO.observable_to_scope","category":"page"},{"location":"api/render/#WebIO.observable_to_scope","page":"Render","title":"WebIO.observable_to_scope","text":"Wrap an observable in a scope to enable \"live updating.\"\n\nThis method also contains distinct code paths for the cases where the observable contains \"non-simple\" data types (in particular, observables that contain Nodes, Scopes, or Widgets need specially handling).\n\n\n\n\n\n","category":"function"},{"location":"api/about/#About-This-Reference","page":"About This Reference","title":"About This Reference","text":"","category":"section"},{"location":"api/about/","page":"About This Reference","title":"About This Reference","text":"Each section in this reference is divided into three subsections.","category":"page"},{"location":"api/about/#Public-API","page":"About This Reference","title":"Public API","text":"","category":"section"},{"location":"api/about/","page":"About This Reference","title":"About This Reference","text":"These are the bits of the WebIO API that are exported and are meant for direct end-user consumption.","category":"page"},{"location":"api/about/#Internal-API","page":"About This Reference","title":"Internal API","text":"","category":"section"},{"location":"api/about/","page":"About This Reference","title":"About This Reference","text":"These are the bits of the API that are not exported but are also not considered implementation details. Frequently, libraries that are built on top of WebIO will extend methods like WebIO.render which are considered part of the internal API.","category":"page"},{"location":"api/about/#Private-API","page":"About This Reference","title":"Private API","text":"","category":"section"},{"location":"api/about/","page":"About This Reference","title":"About This Reference","text":"These are the bits of the API that are considered implementation details. These pieces of the API may be modified, created, or removed without notice. They are documented here for completeness only.","category":"page"},{"location":"api/scope/#Scopes","page":"Scopes","title":"Scopes","text":"","category":"section"},{"location":"api/scope/#Public-API","page":"Scopes","title":"Public API","text":"","category":"section"},{"location":"api/scope/","page":"Scopes","title":"Scopes","text":"Scope","category":"page"},{"location":"api/scope/#WebIO.Scope","page":"Scopes","title":"WebIO.Scope","text":"Scope(<keyword arguments>)\n\nAn object which can send and receive messages.\n\nArguments\n\ndom: The DOM node that will be rendered when the scope is displayed in the   browser.\nimports: An collection of Assets to load (see Asset for   more documentation) when the scope is mounted. If the entry is not an   Asset then it should be an argument to construct an Asset.\n\nExamples\n\nmyscope = Scope(\n    dom=node(:p, \"I'm a little scope!\"),\n    imports=[Asset(\"foo.js\"), \"bar.css\", \"spam\" => \"spam.js\"],\n)\n\n\n\n\n\n","category":"type"},{"location":"#WebIO.jl","page":"WebIO.jl","title":"WebIO.jl","text":"","category":"section"},{"location":"","page":"WebIO.jl","title":"WebIO.jl","text":"Documentation for WebIO.jl","category":"page"},{"location":"api/node/#Nodes","page":"Nodes","title":"Nodes","text":"","category":"section"},{"location":"api/node/#Public-API","page":"Nodes","title":"Public API","text":"","category":"section"},{"location":"api/node/","page":"Nodes","title":"Nodes","text":"Node\nnode","category":"page"},{"location":"api/node/#WebIO.Node","page":"Nodes","title":"WebIO.Node","text":"Node(instanceof, children...; props...)\nNode(instanceof, children, props)\n\nThe building block of WebIO. A Node is simply a wrapper around an instance (some Julia object) together with some child nodes and additional properties.\n\nThe most common type of Node is a DOM node. These can be constructed just by specifying a symbol as the instanceof (they are promoted to an instance of WebIO.DOM under the hood).\n\njulia> Node(:div, Node(:p, \"I am a paragraph!\", class=\"important\"))\n(div\n  (p { class=\"important\" }\n    \"I am a paragraph!\"))\n\nNodes with custom (non-DOM) instances should have a corresponding WebIO.render method defined.\n\n\n\n\n\n","category":"type"}]
}
